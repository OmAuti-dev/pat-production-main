datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MANAGER
  TEAM_LEADER
  EMPLOYEE
  CLIENT
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  name          String
  email         String    @unique
  role          Role      @default(EMPLOYEE)
  profileImage  String?
  phoneNumber   String?
  skills        String[]
  experience    Int       @default(0)
  resumeUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  googleResourceId String?
  
  // Task relations
  createdTasks  Task[]    @relation("CreatedBy")
  assignedTasks Task[]    @relation("AssignedTo")
  
  // Team relations
  memberOfTeams TeamMember[]
  leadingTeams  Team[]    @relation("TeamLead")
  
  // Project relations
  managedProjects Project[] @relation("ManagedBy")
  clientProjects  Project[] @relation("ClientOf")
  
  // Other fields
  tier             String? @default("Free")
  credits          String? @default("10")
  
  // Workflow relation
  workflows         Workflow[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("TODO")
  priority    String   @default("MEDIUM")
  deadline    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy   User     @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String
  assignedTo  User?    @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  leader      User     @relation("TeamLead", fields: [leaderId], references: [id])
  leaderId    String
  members     TeamMember[]
  projects    Project[]
}

model TeamMember {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  role      String   @default("MEMBER")

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String

  @@unique([userId, teamId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("PLANNING")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  manager     User     @relation("ManagedBy", fields: [managerId], references: [id])
  managerId   String
  client      User?    @relation("ClientOf", fields: [clientId], references: [id])
  clientId    String?
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?
  tasks       Task[]
}

model Workflow {
  id                String    @id @default(cuid())
  name              String
  description       String?
  userId            String
  publish           Boolean   @default(false)
  nodes             Json?
  edges             Json?
  discordTemplate   String?
  slackTemplate     String?
  slackAccessToken  String?
  slackChannels     String[]  @default([])
  notionTemplate    String?
  notionAccessToken String?
  notionDbId        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id])
} 