// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  clerkId      String  @unique
  name         String?
  email        String  @unique
  profileImage String?
  tier         String? @default("Free")
  credits      String? @default("10")
  role         Role    @default(EMPLOYEE)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  localGoogleId    String?  @unique
  googleResourceId String?  @unique

  LocalGoogleCredential LocalGoogleCredential?
  DiscordWebhook        DiscordWebhook[]
  Notion                Notion[]
  Slack                 Slack[]
  connections           Connections[]
  workflows             Workflows[]
  projectTeamMember     ProjectTeamMember[]
  managedProjects       Project[]   @relation("managedProjects")   // Projects managed by this user
  clientProjects        Project[]   @relation("clientProjects")    // Projects where user is the client
  assignedTasks         Task[]      @relation("assignedTasks")
  createdTasks          Task[]      @relation("createdTasks")
  campaigns             Campaign[]
  userProjects         UserProject[] // New relation for project assignments
  comments              Comment[]
}

model LocalGoogleCredential {
  id          String @id @default(uuid())
  accessToken String @unique

  folderId   String?
  pageToken  String?
  channelId  String  @unique @default(uuid())
  subscribed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  user        User          @relation(fields: [userId], references: [clerkId])
  userId      String
  connections Connections[]
}

model Slack {
  id String @id @default(uuid())

  appId            String
  authedUserId     String
  authedUserToken  String @unique
  slackAccessToken String @unique
  botUserId        String
  teamId           String
  teamName         String

  User        User          @relation(fields: [userId], references: [clerkId])
  userId      String
  connections Connections[]
}

model Notion {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  workspaceId   String        @unique
  databaseId    String        @unique
  workspaceName String
  workspaceIcon String
  User          User          @relation(fields: [userId], references: [clerkId])
  userId        String
  connections   Connections[]
}

model Connections {
  id               String          @id @default(uuid())
  type             String          @unique
  DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  discordWebhookId String?
  Notion           Notion?         @relation(fields: [notionId], references: [id])
  notionId         String?
  User             User?           @relation(fields: [userId], references: [clerkId])
  userId           String?
  Slack            Slack?          @relation(fields: [slackId], references: [id])
  slackId          String?
}

model Workflows {
  id                String   @id @default(uuid())
  nodes             String?
  edges             String?
  name              String
  discordTemplate   String?
  notionTemplate    String?
  slackTemplate     String?
  slackChannels     String[]
  slackAccessToken  String?
  notionAccessToken String?
  notionDbId        String?
  flowPath          String?
  cronPath          String?
  publish           Boolean? @default(false)
  description       String
  User              User     @relation(fields: [userId], references: [clerkId])
  userId            String
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  type        String
  progress    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resources   ProjectResource[]
  client      User     @relation(name: "clientProjects", fields: [clientId], references: [clerkId])
  clientId    String
  manager     User     @relation(name: "managedProjects", fields: [managerId], references: [clerkId])
  managerId   String
  teamMembers ProjectTeamMember[]
  tasks       Task[]
  users       UserProject[]
  comments    Comment[]
}

model ProjectTeamMember {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [clerkId])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model ProjectResource {
  id        String   @id @default(uuid())
  title     String
  url       String
  type      String   // "doc" or "link"
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  title       String
  status      String   @default("TODO")
  priority    String   @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  assignedTo  User     @relation("assignedTasks", fields: [assignedToId], references: [clerkId])
  assignedToId String
  createdBy   User     @relation("createdTasks", fields: [createdById], references: [clerkId])
  createdById String
}

model Campaign {
  id          String   @id @default(uuid())
  name        String
  date        DateTime @default(now())
  openRate    Float
  clickRate   Float
  recipients  Int
  growth      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [clerkId])
  userId      String
}

model UserProject {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  rating    Int?     // Optional rating (1-5 stars)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [clerkId])
  userId    String
}

enum Role {
  ADMIN
  MANAGER
  TEAM_LEADER
  EMPLOYEE
  CLIENT
}
